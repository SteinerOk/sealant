/*
 * Copyright 2024 Ihor Kushnirenko
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dev.steinerok.sealant.compiler.ksp

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import dev.steinerok.sealant.compiler.AnnotationSpec
import dev.steinerok.sealant.compiler.ClassNames
import dev.steinerok.sealant.compiler.FileSpec

/**
 *
 */
@Suppress("FunctionName")
public fun SealantFileSpec(
    packageName: String,
    fileName: String,
    generatorComment: String = SEALANT_GENERATOR_COMMENT,
    block: FileSpec.Builder.() -> Unit,
): FileSpec = FileSpec(packageName, fileName) {
    // Suppress any deprecation warnings.
    suppressWarnings()
    //
    addSealantOptIns()
    //
    block()
    //
    addFileComment(generatorComment)
}

/**
 *
 */
@Suppress("FunctionName")
public fun SealantFileSpec(
    className: ClassName,
    generatorComment: String = SEALANT_GENERATOR_COMMENT,
    block: FileSpec.Builder.() -> Unit,
): FileSpec = FileSpec(className) {
    // Suppress any deprecation warnings.
    suppressWarnings()
    //
    addSealantOptIns()
    //
    block()
    //
    addFileComment(generatorComment)
}

private const val SEALANT_GENERATOR_COMMENT =
    "Generated by Sealant.\nhttps://github.com/SteinerOk/sealant"

private fun FileSpec.Builder.suppressWarnings() {
    addAnnotation(
        AnnotationSpec(Suppress::class) {
            // Suppress deprecation warnings.
            addMember("\"DEPRECATION\"")
            // Suppress errors for experimental features in generated code.
            addMember("\"OPT_IN_USAGE\"")
            addMember("\"OPT_IN_USAGE_ERROR\"")
        }
    )
}

private fun FileSpec.Builder.addSealantOptIns() {
    addAnnotation(
        AnnotationSpec(ClassNames.optIn) {
            addMember("%T::class", ClassNames.internalSealantApi)
            addMember("%T::class", ClassNames.experimentalSealantApi)
        }
    )
}
