/*
 * Copyright 2022 Ihor Kushnirenko
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@file:Suppress("FunctionName")

package dev.steinerok.sealant.core

import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeName
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.anvil.compiler.internal.buildFile as anvilBuildFile

/**
 *
 */
public fun FileSpec.Companion.buildFile(
    packageName: String,
    fileName: String,
    block: FileSpec.Builder.() -> Unit
): String = FileSpec.anvilBuildFile(
    packageName = packageName,
    fileName = fileName,
    generatorComment = "Generated by Sealant.\nhttps://github.com/SteinerOk/sealant",
    block = {
        addLibraryOptIns()
        block()
    }
)

private fun FileSpec.Builder.addLibraryOptIns() {
    addAnnotation(
        AnnotationSpec(ClassNames.optIn) {
            addMember("%T::class", ClassNames.internalSealantApi)
            addMember("%T::class", ClassNames.experimentalSealantApi)
        }
    )
}

/**
 *
 */
public fun TypeSpec.Builder.primaryConstructorWithProperties(
    vararg propertySpecs: PropertySpec
): TypeSpec.Builder {
    val properties = propertySpecs.map { pSpec ->
        pSpec.toBuilder().initializer(pSpec.name).build()
    }
    val parameters = properties.map { property ->
        ParameterSpec(property.name, property.type)
    }
    val constructor = ConstructorSpec {
        addParameters(parameters)
        addAnnotation(AnnotationSpec(ClassNames.inject))
    }
    return this
        .primaryConstructor(constructor)
        .addProperties(properties)
}

/**
 *
 */
public fun ClassSpec(
    name: ClassName,
    block: TypeSpec.Builder.() -> Unit = {}
): TypeSpec = TypeSpec.classBuilder(name)
    .apply { block() }
    .build()

/**
 *
 */
public fun ObjectSpec(
    name: ClassName,
    block: TypeSpec.Builder.() -> Unit = {}
): TypeSpec = TypeSpec.objectBuilder(name)
    .apply { block() }
    .build()

/**
 *
 */
public fun InterfaceSpec(
    className: ClassName,
    block: TypeSpec.Builder.() -> Unit = {}
): TypeSpec = TypeSpec.interfaceBuilder(className)
    .apply { block() }
    .build()

/**
 *
 */
public fun InterfaceSpec(
    name: String,
    block: TypeSpec.Builder.() -> Unit = {}
): TypeSpec = TypeSpec.interfaceBuilder(name)
    .apply { block() }
    .build()

/**
 *
 */
public fun FunInterfaceSpec(
    name: ClassName,
    block: TypeSpec.Builder.() -> Unit = {}
): TypeSpec = TypeSpec.funInterfaceBuilder(name)
    .apply { block() }
    .build()

/**
 *
 */
public fun CompanionObjectSpec(
    name: String? = null,
    block: TypeSpec.Builder.() -> Unit = {}
): TypeSpec = TypeSpec.companionObjectBuilder(name)
    .apply { block() }
    .build()

/**
 *
 */
public fun PropertySpec(
    name: String,
    type: TypeName,
    block: PropertySpec.Builder.() -> Unit = {}
): PropertySpec = PropertySpec.builder(name, type)
    .apply { block() }
    .build()

/**
 *
 */
public fun ParameterSpec(
    name: String,
    type: TypeName,
    block: ParameterSpec.Builder.() -> Unit = {}
): ParameterSpec = ParameterSpec.builder(name, type)
    .apply { block() }
    .build()

/**
 *
 */
public fun ConstructorSpec(
    block: FunSpec.Builder.() -> Unit = {}
): FunSpec = FunSpec.constructorBuilder()
    .apply { block() }
    .build()

/**
 *
 */
public fun FunSpec(
    name: String,
    block: FunSpec.Builder.() -> Unit = {}
): FunSpec = FunSpec.builder(name)
    .apply { block() }
    .build()

/**
 *
 */
public fun AnnotationSpec(
    name: ClassName,
    block: AnnotationSpec.Builder.() -> Unit = {}
): AnnotationSpec = AnnotationSpec.builder(name)
    .apply { block() }
    .build()

/**
 *
 */
public fun TypeSpec.Builder.addContributesTo(
    scopeClassName: ClassName,
    block: AnnotationSpec.Builder.() -> Unit = {}
): TypeSpec.Builder = addAnnotation(
    AnnotationSpec(ClassNames.contributesTo) {
        addMember("scope·=·%T::class", scopeClassName)
        block()
    }
)
